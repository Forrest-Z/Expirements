{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/sharathsrini/Expirements/blob/master/2.0)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 50\n",
        "grid_y_m = 50\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 0.5\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "policy_map = [[' ' for x in range(grid_on_x)] for y in range(grid_on_y)]\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "policy_mat=['>',]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in delta_angles:\n",
        "        omega  = (speed / LENGTH) * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + (omega * DT))\n",
        "        dX = speed * np.cos(theta2) * DT\n",
        "        dY = speed * np.sin(theta2) * DT\n",
        "        #i=i+1\n",
        "        #print(i,[SPEED,np.cos(theta2),DT,omega,theta2,dX,dY])\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      #print('False',add_value)\n",
        "      return False\n",
        "  #('True',add_value)\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "  print(\"STARTED A*\")\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "            open_list.append(new_state)\n",
        "            closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "            cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "            #plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    #print(l)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2exSViITSeqc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### PUT OBSTACLES:\n",
        "  def put_obstacles(X_list,Y_list,grid):\n",
        "    if(len(X_list)>0):\n",
        "      for i in  X_list:\n",
        "        x_XO=[]\n",
        "        x_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          x_XO.append(i[0])\n",
        "          x_YO.append(k)\n",
        "          grid[i[0]][k]=1\n",
        "        plt.scatter(x_XO,x_YO)\n",
        "    if(len(Y_list)>0):\n",
        "      for i in Y_list:\n",
        "        y_XO=[]\n",
        "        y_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          y_XO.append(i[0])\n",
        "          y_YO.append(k)\n",
        "          grid[k][i[0]]=1\n",
        "        plt.scatter(y_YO,y_XO)\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZbpDvcJDRw3I",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "START=[40,40]\n",
        "SPEED=7\n",
        "goal_node = goal(10,70)\n",
        "present_heading=0\n",
        "vehicle_pt_obj = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,START,present_heading)\n",
        "#print(vehicle_pt_obj.input_co_ordinates)\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "vJQLZcriX_il",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "outputId": "7e5dd3ca-f780-4de9-ec3f-68b8a951019b"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[25,0,25],[70,60,80]],[[60,0,30],[25,60,75]],GRID_TEST)\n",
        "if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "  process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,SPEED)\n",
        "  if(process_further):\n",
        "    show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y])\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "else:\n",
        "  print(\"GOAL CANT BE REACHED!!\")\n"
      ],
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.442253112793\n",
            "[40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 35.0, 15.0, -5.0, -15.0, -0.0, -0.0, 5.0, -5.0, -0.0, -0.0, -15.0, -20.0, -40.0, -40.0, -40.0, -40.0, -35.0, -15.0, 5.0, 25.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 20.0, -0.0, -0.0, -0.0, 5.0, -5.0, 5.0, -5.0, 5.0, -10.0, 10.0, -0.0, -0.0, -5.0, 5.0, -5.0, -0.0, -10.0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f20e7552e10>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "eTYGet7FXRgX",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def planner(START,goal_node,GRID_TEST,current_state,SPEED,vehicle_pt_obj):\n",
        "  put_obstacles([[24,0,25],[26,0,25],[25,0,50]],[],GRID_TEST)\n",
        "  if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "    process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,SPEED)\n",
        "    if(process_further):\n",
        "      show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y])\n",
        "    else:\n",
        "      print(\"GOAL CANT BE REACHED!!\")\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "GCpjyw4fj8ne",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}